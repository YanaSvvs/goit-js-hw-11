{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '50595103-65097a90456797714ffdbb949'; \nconst BASE_URL = 'https://pixabay.com/api/';\n\nexport async function getImagesByQuery(query) {\n    const params = new URLSearchParams({\n        key: API_KEY,\n        q: query,\n        image_type: 'photo',\n        orientation: 'horizontal',\n        safesearch: 'true',\n    });\n\n    try {\n        const response = await axios.get(`${BASE_URL}?${params.toString()}`);\n        return response.data;\n    } catch (error) {\n        console.error(\"Error fetching images from Pixabay:\", error);\n        throw error;\n    }\n}\n","\nimport SimpleLightbox from 'simplelightbox'; \n\nconst galleryElement = document.getElementById('gallery');\nconst loaderElement = document.querySelector('.loader');\n\nlet lightbox; \n\nexport function createGallery(images) {\n    if (!galleryElement) {\n        console.error('Gallery element not found!');\n        return;\n    }\n\n    const markup = images.map(image => `\n        <li class=\"gallery-item\">\n            <a class=\"gallery-link\" href=\"${image.largeImageURL}\">\n                <img\n                    class=\"gallery-image\"\n                    src=\"${image.webformatURL}\"\n                    alt=\"${image.tags}\"\n                    loading=\"lazy\"\n                />\n            </a>\n            <div class=\"info\">\n                <p><b>Likes</b> ${image.likes}</p>\n                <p><b>Views</b> ${image.views}</p>\n                <p><b>Comments</b> ${image.comments}</p>\n                <p><b>Downloads</b> ${image.downloads}</p>\n            </div>\n        </li>\n    `).join(''); \n\n    galleryElement.innerHTML = markup; \n\n    if (lightbox) {\n        lightbox.refresh(); \n    } else {\n        lightbox = new SimpleLightbox('.gallery a', {\n            captionsData: 'alt',\n            captionDelay: 250,\n        });\n    }\n}\n\nexport function clearGallery() {\n    if (galleryElement) {\n        galleryElement.innerHTML = '';\n    }\n    if (lightbox) {\n        lightbox.destroy();\n        lightbox = null; \n    }\n}\n\nexport function showLoader() {\n    if (loaderElement) {\n        loaderElement.classList.remove('is-hidden');\n    }\n}\n\nexport function hideLoader() {\n    if (loaderElement) {\n        loaderElement.classList.add('is-hidden');\n    }\n}\n","// src/js/main.js\n\nimport 'izitoast/dist/css/iziToast.min.css';\nimport iziToast from 'izitoast';\n\nimport 'simplelightbox/dist/simple-lightbox.min.css'; \n\nimport { getImagesByQuery } from './js/pixabay-api.js';\nimport { createGallery, clearGallery, showLoader, hideLoader } from './js/render-functions.js';\n\nconst searchForm = document.getElementById('search-form');\nconst searchInput = document.getElementById('search-input');\n\nhideLoader(); \n\nsearchForm.addEventListener('submit', async (event) => {\n    event.preventDefault();\n    const query = searchInput.value.trim();\n\n    if (!query) {\n        iziToast.error({\n            title: 'Error',\n            message: 'Search query cannot be empty!',\n            position: 'topRight',\n            timeout: 3000,\n        });\n        return;\n    }\n\n    clearGallery();\n    showLoader(); \n\n    try {\n        const data = await getImagesByQuery(query);\n        \n        if (data.hits && data.hits.length > 0) {\n            createGallery(data.hits);\n        } else {\n            iziToast.info({\n                title: 'No Results',\n                message: 'Sorry, there are no images matching your search query. Please try again!',\n                position: 'topRight',\n                timeout: 5000,\n            });\n        }\n    } catch (error) {\n        console.error(\"Search failed:\", error);\n        iziToast.error({\n            title: 'Error',\n            message: `Failed to fetch images: ${error.message || 'Unknown error'}. Please try again later.`,\n            position: 'topRight',\n            timeout: 5000,\n        });\n    } finally {\n        \n        hideLoader(); \n    }\n\n    searchForm.reset();\n});"],"names":["API_KEY","BASE_URL","getImagesByQuery","query","params","axios","error","galleryElement","loaderElement","lightbox","createGallery","images","markup","image","SimpleLightbox","clearGallery","showLoader","hideLoader","searchForm","searchInput","event","iziToast","data"],"mappings":"owBAEA,MAAMA,EAAU,qCACVC,EAAW,2BAEV,eAAeC,EAAiBC,EAAO,CAC1C,MAAMC,EAAS,IAAI,gBAAgB,CAC/B,IAAKJ,EACL,EAAGG,EACH,WAAY,QACZ,YAAa,aACb,WAAY,MACpB,CAAK,EAED,GAAI,CAEA,OADiB,MAAME,EAAM,IAAI,GAAGJ,CAAQ,IAAIG,EAAO,SAAU,CAAA,EAAE,GACnD,IACnB,OAAQE,EAAO,CACZ,cAAQ,MAAM,sCAAuCA,CAAK,EACpDA,CACT,CACL,CClBA,MAAMC,EAAiB,SAAS,eAAe,SAAS,EAClDC,EAAgB,SAAS,cAAc,SAAS,EAEtD,IAAIC,EAEG,SAASC,EAAcC,EAAQ,CAClC,GAAI,CAACJ,EAAgB,CACjB,QAAQ,MAAM,4BAA4B,EAC1C,MACH,CAED,MAAMK,EAASD,EAAO,IAAIE,GAAS;AAAA;AAAA,4CAEKA,EAAM,aAAa;AAAA;AAAA;AAAA,2BAGpCA,EAAM,YAAY;AAAA,2BAClBA,EAAM,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,kCAKHA,EAAM,KAAK;AAAA,kCACXA,EAAM,KAAK;AAAA,qCACRA,EAAM,QAAQ;AAAA,sCACbA,EAAM,SAAS;AAAA;AAAA;AAAA,KAGhD,EAAE,KAAK,EAAE,EAEVN,EAAe,UAAYK,EAEvBH,EACAA,EAAS,QAAO,EAEhBA,EAAW,IAAIK,EAAe,aAAc,CACxC,aAAc,MACd,aAAc,GAC1B,CAAS,CAET,CAEO,SAASC,GAAe,CACvBR,IACAA,EAAe,UAAY,IAE3BE,IACAA,EAAS,QAAO,EAChBA,EAAW,KAEnB,CAEO,SAASO,GAAa,CACrBR,GACAA,EAAc,UAAU,OAAO,WAAW,CAElD,CAEO,SAASS,GAAa,CACrBT,GACAA,EAAc,UAAU,IAAI,WAAW,CAE/C,CCvDA,MAAMU,EAAa,SAAS,eAAe,aAAa,EAClDC,EAAc,SAAS,eAAe,cAAc,EAE1DF,IAEAC,EAAW,iBAAiB,SAAU,MAAOE,GAAU,CACnDA,EAAM,eAAc,EACpB,MAAMjB,EAAQgB,EAAY,MAAM,KAAI,EAEpC,GAAI,CAAChB,EAAO,CACRkB,EAAS,MAAM,CACX,MAAO,QACP,QAAS,gCACT,SAAU,WACV,QAAS,GACrB,CAAS,EACD,MACH,CAEDN,IACAC,IAEA,GAAI,CACA,MAAMM,EAAO,MAAMpB,EAAiBC,CAAK,EAErCmB,EAAK,MAAQA,EAAK,KAAK,OAAS,EAChCZ,EAAcY,EAAK,IAAI,EAEvBD,EAAS,KAAK,CACV,MAAO,aACP,QAAS,2EACT,SAAU,WACV,QAAS,GACzB,CAAa,CAER,OAAQf,EAAO,CACZ,QAAQ,MAAM,iBAAkBA,CAAK,EACrCe,EAAS,MAAM,CACX,MAAO,QACP,QAAS,2BAA2Bf,EAAM,SAAW,eAAe,4BACpE,SAAU,WACV,QAAS,GACrB,CAAS,CACT,QAAc,CAENW,GACH,CAEDC,EAAW,MAAK,CACpB,CAAC"}